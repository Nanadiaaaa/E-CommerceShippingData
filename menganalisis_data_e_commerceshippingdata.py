# -*- coding: utf-8 -*-
"""Menganalisis Data E-CommerceShippingData

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m5xz_DAvzxPjj0JyoLZoyB6feDcP1CFr

# **1. Data Tabular**

- Data tabular adalah jenis data yang terstruktur dalam bentuk tabel, dengan baris dan kolom yang terorganisir dengan jelas.
- Data tabular sering kali digunakan untuk analisis dan pemodelan statistik Algoritma pembelajaran mesin seperti regresi, klasifikasi, atau pengelompokan sering diterapkan pada data tabular untuk mengungkap pola atau membuat prediksi berdasarkan atribut-atribut yang diberikan.
- Contoh format data tabular yang umum digunakan adalah CSV (Comma-Separated Values) atau Excel, di mana setiap baris data dipisahkan dengan koma atau diatur dalam sel-sel yang berbeda.

Disini saya akan melakukan analisis data, saya menggunakan dataset yang saya dapat di kaggle : https://www.kaggle.com/datasets/prachi13/customer-analytics
disini saya akan melakukan beberapa langkah untuk menganalisis data yang ada di kaggle

### Persiapan Dataset dan EDA (Exploratory Data Analysis)

- Ditahap pertama ini adalah tempat untuk saya mempersiapkan g drive sebagai tempat penyimpanan data yang akan diolah, mendowload dataset yang akan digunakan 
- Exploratory Data Analysis (EDA) adalah proses investigasi awal yang dilakukan pada data untuk memahami dan menganalisis karakteristik dasar, pola, dan hubungan di dalamnya.
- Tujuan utama dari EDA adalah untuk menggali informasi penting dari data, mengidentifikasi anomali atau outliers, menemukan pola menarik, dan mengajukan hipotesis yang mungkin untuk diuji lebih lanjut.
"""

from google.colab import drive
drive.mount ("/content/gdrive")

! pip install kaggle
! pip install split-folders
import splitfolders

import os 
os.environ['KAGGLE_CONFIG_DIR'] = "/content/gdrive/MyDrive/kaggle/dataset1"

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/gdrive/MyDrive/kaggle/dataset1"

# Download dataset []
#!kaggle datasets download -d prachi13/customer-analytics

"""- disini saya memilih dataset tentang E-Commerce Shipping data, E-commerce shipping data mengacu pada data yang terkait dengan proses pengiriman barang dalam industri e-commerce.E-Commerce Shipping data ini melihat Pengiriman Produk Disampaikan tepat waktu atau tidak? Untuk Memenuhi Permintaan Pelanggan E-Commerce, sesuai atau tidaknya dapat dilihat dari rate yang diberikan oleh customer"""

import pandas as pd

data = pd.read_csv ('archive.zip')
data

"""- Data yang terdapat didalam dataset yang saya gunakan ada yang berupa integer dan juga object

"""

display(data.describe())
display(data.info())

"""### Data Preprocessing

- selanjutnya adalah data processing merujuk pada serangkaian langkah atau aktivitas yang dilakukan untuk mengubah data mentah menjadi informasi yang bermakna. Proses ini melibatkan manipulasi, analisis, transformasi, dan penyimpanan data dengan tujuan untuk menghasilkan hasil yang berguna dan relevan.
- disini saya melalukan label encoder merupakan metode dalam pemrosesan data yang digunakan untuk mengubah variabel kategorikal menjadi nilai numerik. Ini adalah salah satu teknik preprocessing yang umum digunakan dalam pembelajaran mesin.
- jadi disini merubah data yang object(huruf) dirubah menjadi int(angka). dirubah karena berpengaruh untuk proses selanjutnya yaitu feature Selection (pemilihan fitur)
"""

#Label Encoder
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, OrdinalEncoder, StandardScaler, MinMaxScaler

labelencoder = LabelEncoder()
data["Warehouse_block"] = labelencoder.fit_transform(data["Warehouse_block"])
data

#Label Encoder
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, OrdinalEncoder, StandardScaler, MinMaxScaler

labelencoder = LabelEncoder()
data["Mode_of_Shipment"] = labelencoder.fit_transform(data["Mode_of_Shipment"])
data

#Label Encoder
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, OrdinalEncoder, StandardScaler, MinMaxScaler

labelencoder = LabelEncoder()
data["Product_importance"] = labelencoder.fit_transform(data["Product_importance"])
data

#Label Encoder
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, OrdinalEncoder, StandardScaler, MinMaxScaler

labelencoder = LabelEncoder()
data["Gender"] = labelencoder.fit_transform(data["Gender"])
data

"""### Feature Selection / Pemilihan Fitur

- feature selection atau pemilihan fitur ini, adalah proses memilih salah satu yang menjadi target yang utama atau sebagai acuan dan sisanya adalah fitur-fitur yang ada pada dtaset. Tujuan utama dari pemilihan fitur adalah mengurangi dimensi data, meningkatkan kinerja model, mengurangi overfitting, meningkatkan interpretabilitas, dan mengurangi waktu dan sumber daya yang diperlukan untuk pemrosesan data.
"""

feature_cols = ['Warehouse_block', 'Customer_care_calls', 'Customer_rating', 'Cost_of_the_Product', 'Prior_purchases',
       'Product_importance', 'Gender', 'Discount_offered', 'Weight_in_gms', 'Reached.on.Time_Y.N']
X = data[feature_cols] # Features
y = data.Mode_of_Shipment # Target variable

"""### Train Test Split

- Train-test split (pemisahan data latih-uji) adalah teknik yang umum digunakan dalam pembelajaran mesin. Train-test split Ini membagi dataset yang tersedia menjadi dua subset yang saling eksklusif: subset data latih (train set) dan subset data uji (test set).
- Tujuan dari train-test split adalah untuk menggunakan subdataset latih untuk melatih model prediktif dan kemudian menggunakan subdataset uji untuk menguji kinerja model yang dilatih. Dengan cara ini, kita dapat memperoleh perkiraan objektif tentang seberapa baik model dapat menggeneralisasi ke data yang tidak terlihat sebelumnya.
- di data saya terdapat 2 variabel yaitu X dan Y, ada X dan Y train juga ada X dan Y test
"""

# Split dataset into training set and test set
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1) # 70% training and 30% test

"""### Decision Tree Model

- Model Decision Tree (pohon keputusan) adalah algoritma pembelajaran mesin yang menggambarkan keputusan dan konsekuensinya dalam bentuk struktur berbentuk seperti pohon. Model ini digunakan untuk masalah klasifikasi dan regresi.
- Dalam Decision Tree, setiap simpul internal (node) dalam pohon merepresentasikan atribut fitur, dan cabang-cabangnya merepresentasikan nilai atau kisaran nilai atribut tersebut. Daun-daun dalam pohon merepresentasikan label kelas atau nilai prediksi.
- dibagian decision tree ini masih juga berhubungan dengan X dan Y train ataupun Fast, sesuai dengan yang dibutuhkan.
"""

# Create Decision Tree classifer object

from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier

clf = DecisionTreeClassifier(criterion="entropy", max_depth=3)

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)
 
#Predict the response for test dataset
y_pred = clf.predict(X_test)

"""### Evaluasi Model

- Akurasi (accuracy) adalah salah satu metrik evaluasi yang umum digunakan untuk mengukur kinerja model klasifikasi. Metrik ini menggambarkan sejauh mana model dapat memprediksi dengan benar kelas target pada data yang ada. Akurasi dinyatakan dalam persentase ataupun bilangan desimal dan dihitung dengan membagi jumlah prediksi yang benar dengan jumlah total sampel.
"""

# Model Accuracy, how often is the classifier correct?
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))